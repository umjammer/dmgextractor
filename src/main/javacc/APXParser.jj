/*-
 * Copyright (C) 2007 Erik Larsson
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

// Name explanation: APX = APX Parser for XML (at least officially)

options {
	STATIC = false;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(APXParser)
/*-
 * Copyright (C) 2007 Erik Larsson
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option) any
 * later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.catacombae.xml.apx;
import org.catacombae.xml.*;

import java.util.*;
import java.io.*;
import java.nio.charset.Charset;

/** Early version of the APX Parser for XML. Currently does not parse DTDs and so doesn't check
    for any validity constraints. It just breaks up the syntactic structure of an XML file and
    reports it to an org.catacombae.xml.XMLContentHandler. This is sufficient for my needs so it
    remains to be seen if the parser will be extended in the future. */
public class APXParser {
    public static final String DEFAULT_ENCODING = "US-ASCII";
    //private Reader usedReader;
    private XMLContentHandler contentHandler;
    
    /** Test main method. The first and only argument denotes a file containing an XML document. */
    public static void main(String[] args) throws Exception {
        InputStream is;
        if(args.length != 1)
	   throw new RuntimeException("The only valid argument is the name of the input file!");
	
        // First, we read the encoding from the xml declaration (if it exists)
	APXParser encodingParser = create(new InputStreamReader(new FileInputStream(args[0]), DEFAULT_ENCODING), 
	                                  new NullXMLContentHandler(Charset.forName(DEFAULT_ENCODING)));
        String encoding = null;
        try { encoding = encodingParser.xmlDecl();} catch(ParseException pe) {}
	if(encoding == null) encoding = DEFAULT_ENCODING;
        
	encodingParser = null; // GC candy
	
	// Then we create a new stream, and parse the entire document using the appropriate encoding
        InputStreamReader usedReader;
	usedReader = new InputStreamReader(new FileInputStream(args[0]), encoding);
        APXParser a = create(usedReader, new DebugXMLContentHandler(Charset.forName(encoding))); //new NullXMLContentHandler(encoding));//
	a.xmlDocument();
    }
    
    /** This is the way to create an APXParser. Don't use the constructor even if it would be possible.
        @param misr the reader supplying the input data for the parser. Can not be null.
	@param xch the content handler that takes care of the contents of the parsed XML document. Can
	           not be null. Use NullXMLContentHandler if you are not intrested in the contents of
		   the document.
	@return the parser (parser.xmlDocument() will start the parsing) */
    public static APXParser create(Reader misr, XMLContentHandler xch) {
        APXParser a = new APXParser(misr);
	//a.usedReader = misr;
	a.contentHandler = xch;
	return a;
    }
}
PARSER_END(APXParser)

/* Tokens common to all states. */
/* PROBLEMS: The class CHAR should be able to match the 10000-10FFFF range, but java's Unicode
   escape does not allow it, since you have to convert it to UTF-16BE first. This conversion
   might not be easy to do as part of a token, and it's really not urgent, considering this
   parser is only used to parse the Plist. This is non-urgent TODO. */
<*> TOKEN: {
      < #SINGLE_S: (" " | "\t" | "\n" | "\r") >
    //| < #S: ( <SINGLE_S> )+ >
    | < #CHAR: ["\u0009", "\n", "\r", "\u0020"-"\uD7FF", "\uE000"-"\uFFFD"/*, "\u10000"-"\u10FFFF"*/] >
    | < #NAME: <NAMESTART> ( <NAMECHAR> )* >
    | < #NAMESTART: ( <LETTER> | "_" | ":" ) >
    | < #NAMECHAR: <LETTER> | <DIGIT> | "." | "-" | "_" | ":" | <COMBININGCHAR> | <EXTENDER> >
    | < #LETTER: ( <BASECHAR> | <IDEOGRAPHIC> ) >
    | < #BASECHAR: ["\u0041"-"\u005A","\u0061"-"\u007A","\u00C0"-"\u00D6","\u00D8"-"\u00F6",
                   "\u00F8"-"\u00FF","\u0100"-"\u0131","\u0134"-"\u013E","\u0141"-"\u0148",
		   "\u014A"-"\u017E","\u0180"-"\u01C3","\u01CD"-"\u01F0","\u01F4"-"\u01F5",
		   "\u01FA"-"\u0217","\u0250"-"\u02A8","\u02BB"-"\u02C1","\u0386",
		   "\u0388"-"\u038A","\u038C","\u038E"-"\u03A1","\u03A3"-"\u03CE",
		   "\u03D0"-"\u03D6","\u03DA","\u03DC","\u03DE","\u03E0","\u03E2"-"\u03F3",
		   "\u0401"-"\u040C","\u040E"-"\u044F","\u0451"-"\u045C","\u045E"-"\u0481",
		   "\u0490"-"\u04C4","\u04C7"-"\u04C8","\u04CB"-"\u04CC","\u04D0"-"\u04EB",
		   "\u04EE"-"\u04F5","\u04F8"-"\u04F9","\u0531"-"\u0556","\u0559",
		   "\u0561"-"\u0586","\u05D0"-"\u05EA","\u05F0"-"\u05F2","\u0621"-"\u063A",
		   "\u0641"-"\u064A","\u0671"-"\u06B7","\u06BA"-"\u06BE","\u06C0"-"\u06CE",
		   "\u06D0"-"\u06D3","\u06D5","\u06E5"-"\u06E6","\u0905"-"\u0939","\u093D",
		   "\u0958"-"\u0961","\u0985"-"\u098C","\u098F"-"\u0990","\u0993"-"\u09A8",
		   "\u09AA"-"\u09B0","\u09B2","\u09B6"-"\u09B9","\u09DC"-"\u09DD",
		   "\u09DF"-"\u09E1","\u09F0"-"\u09F1","\u0A05"-"\u0A0A","\u0A0F"-"\u0A10",
		   "\u0A13"-"\u0A28","\u0A2A"-"\u0A30","\u0A32"-"\u0A33","\u0A35"-"\u0A36",
		   "\u0A38"-"\u0A39","\u0A59"-"\u0A5C","\u0A5E","\u0A72"-"\u0A74",
		   "\u0A85"-"\u0A8B","\u0A8D","\u0A8F"-"\u0A91","\u0A93"-"\u0AA8",
		   "\u0AAA"-"\u0AB0","\u0AB2"-"\u0AB3","\u0AB5"-"\u0AB9","\u0ABD","\u0AE0",
		   "\u0B05"-"\u0B0C","\u0B0F"-"\u0B10","\u0B13"-"\u0B28","\u0B2A"-"\u0B30",
		   "\u0B32"-"\u0B33","\u0B36"-"\u0B39","\u0B3D","\u0B5C"-"\u0B5D",
		   "\u0B5F"-"\u0B61","\u0B85"-"\u0B8A","\u0B8E"-"\u0B90","\u0B92"-"\u0B95",
		   "\u0B99"-"\u0B9A","\u0B9C","\u0B9E"-"\u0B9F","\u0BA3"-"\u0BA4",
		   "\u0BA8"-"\u0BAA","\u0BAE"-"\u0BB5","\u0BB7"-"\u0BB9","\u0C05"-"\u0C0C",
		   "\u0C0E"-"\u0C10","\u0C12"-"\u0C28","\u0C2A"-"\u0C33","\u0C35"-"\u0C39",
		   "\u0C60"-"\u0C61","\u0C85"-"\u0C8C","\u0C8E"-"\u0C90","\u0C92"-"\u0CA8",
		   "\u0CAA"-"\u0CB3","\u0CB5"-"\u0CB9","\u0CDE","\u0CE0"-"\u0CE1",
		   "\u0D05"-"\u0D0C","\u0D0E"-"\u0D10","\u0D12"-"\u0D28","\u0D2A"-"\u0D39",
		   "\u0D60"-"\u0D61","\u0E01"-"\u0E2E","\u0E30","\u0E32"-"\u0E33",
		   "\u0E40"-"\u0E45","\u0E81"-"\u0E82","\u0E84","\u0E87"-"\u0E88","\u0E8A",
		   "\u0E8D","\u0E94"-"\u0E97","\u0E99"-"\u0E9F","\u0EA1"-"\u0EA3","\u0EA5",
		   "\u0EA7","\u0EAA"-"\u0EAB","\u0EAD"-"\u0EAE","\u0EB0","\u0EB2"-"\u0EB3",
		   "\u0EBD","\u0EC0"-"\u0EC4","\u0F40"-"\u0F47","\u0F49"-"\u0F69",
		   "\u10A0"-"\u10C5","\u10D0"-"\u10F6","\u1100","\u1102"-"\u1103",
		   "\u1105"-"\u1107","\u1109","\u110B"-"\u110C","\u110E"-"\u1112","\u113C",
		   "\u113E","\u1140","\u114C","\u114E","\u1150","\u1154"-"\u1155","\u1159",
		   "\u115F"-"\u1161","\u1163","\u1165","\u1167","\u1169","\u116D"-"\u116E",
		   "\u1172"-"\u1173","\u1175","\u119E","\u11A8","\u11AB","\u11AE"-"\u11AF",
		   "\u11B7"-"\u11B8","\u11BA","\u11BC"-"\u11C2","\u11EB","\u11F0","\u11F9",
		   "\u1E00"-"\u1E9B","\u1EA0"-"\u1EF9","\u1F00"-"\u1F15","\u1F18"-"\u1F1D",
		   "\u1F20"-"\u1F45","\u1F48"-"\u1F4D","\u1F50"-"\u1F57","\u1F59","\u1F5B",
		   "\u1F5D","\u1F5F"-"\u1F7D","\u1F80"-"\u1FB4","\u1FB6"-"\u1FBC","\u1FBE",
		   "\u1FC2"-"\u1FC4","\u1FC6"-"\u1FCC","\u1FD0"-"\u1FD3","\u1FD6"-"\u1FDB",
		   "\u1FE0"-"\u1FEC","\u1FF2"-"\u1FF4","\u1FF6"-"\u1FFC","\u2126",
		   "\u212A"-"\u212B","\u212E","\u2180"-"\u2182","\u3041"-"\u3094",
		   "\u30A1"-"\u30FA","\u3105"-"\u312C","\uAC00"-"\uD7A3"] >
    | < #IDEOGRAPHIC: ["\u4E00"-"\u9FA5","\u3007","\u3021"-"\u3029"] >
    | < #COMBININGCHAR: ["\u0300"-"\u0345", "\u0360"-"\u0361", "\u0483"-"\u0486", 
                        "\u0591"-"\u05A1", "\u05A3"-"\u05B9", "\u05BB"-"\u05BD", "\u05BF", 
			"\u05C1"-"\u05C2", "\u05C4", "\u064B"-"\u0652", "\u0670", 
			"\u06D6"-"\u06DC", "\u06DD"-"\u06DF", "\u06E0"-"\u06E4", 
			"\u06E7"-"\u06E8", "\u06EA"-"\u06ED", "\u0901"-"\u0903", "\u093C", 
			"\u093E"-"\u094C", "\u094D", "\u0951"-"\u0954", "\u0962"-"\u0963", 
			"\u0981"-"\u0983", "\u09BC", "\u09BE", "\u09BF", "\u09C0"-"\u09C4", 
			"\u09C7"-"\u09C8", "\u09CB"-"\u09CD", "\u09D7", "\u09E2"-"\u09E3", 
			"\u0A02", "\u0A3C", "\u0A3E", "\u0A3F", "\u0A40"-"\u0A42", 
			"\u0A47"-"\u0A48", "\u0A4B"-"\u0A4D", "\u0A70"-"\u0A71", 
			"\u0A81"-"\u0A83", "\u0ABC", "\u0ABE"-"\u0AC5", "\u0AC7"-"\u0AC9", 
			"\u0ACB"-"\u0ACD", "\u0B01"-"\u0B03", "\u0B3C", "\u0B3E"-"\u0B43", 
			"\u0B47"-"\u0B48", "\u0B4B"-"\u0B4D", "\u0B56"-"\u0B57", 
			"\u0B82"-"\u0B83", "\u0BBE"-"\u0BC2", "\u0BC6"-"\u0BC8", 
			"\u0BCA"-"\u0BCD", "\u0BD7", "\u0C01"-"\u0C03", "\u0C3E"-"\u0C44", 
			"\u0C46"-"\u0C48", "\u0C4A"-"\u0C4D", "\u0C55"-"\u0C56", 
			"\u0C82"-"\u0C83", "\u0CBE"-"\u0CC4", "\u0CC6"-"\u0CC8", 
			"\u0CCA"-"\u0CCD", "\u0CD5"-"\u0CD6", "\u0D02"-"\u0D03", 
			"\u0D3E"-"\u0D43", "\u0D46"-"\u0D48", "\u0D4A"-"\u0D4D", 
			"\u0D57", "\u0E31", "\u0E34"-"\u0E3A", "\u0E47"-"\u0E4E", "\u0EB1", 
			"\u0EB4"-"\u0EB9", "\u0EBB"-"\u0EBC", "\u0EC8"-"\u0ECD", 
			"\u0F18"-"\u0F19", "\u0F35", "\u0F37", "\u0F39", "\u0F3E", "\u0F3F", 
			"\u0F71"-"\u0F84", "\u0F86"-"\u0F8B", "\u0F90"-"\u0F95", "\u0F97", 
			"\u0F99"-"\u0FAD", "\u0FB1"-"\u0FB7", "\u0FB9", "\u20D0"-"\u20DC", 
			"\u20E1", "\u302A"-"\u302F", "\u3099", "\u309A"] >
    | < #DIGIT: ["\u0030"-"\u0039", "\u0660"-"\u0669", "\u06F0"-"\u06F9", "\u0966"-"\u096F", 
                "\u09E6"-"\u09EF", "\u0A66"-"\u0A6F", "\u0AE6"-"\u0AEF", "\u0B66"-"\u0B6F", 
		"\u0BE7"-"\u0BEF", "\u0C66"-"\u0C6F", "\u0CE6"-"\u0CEF", "\u0D66"-"\u0D6F", 
		"\u0E50"-"\u0E59", "\u0ED0"-"\u0ED9", "\u0F20"-"\u0F29"] >
    | < #EXTENDER: ["\u00B7", "\u02D0", "\u02D1", "\u0387", "\u0640", "\u0E46", "\u0EC6", 
                   "\u3005", "\u3031"-"\u3035", "\u309D"-"\u309E", "\u30FC"-"\u30FE"] >
    | < #REFERENCE: <ENTITYREF> | <CHARREF> >
    | < #ENTITYREF: "&" <NAMESTART> (<NAMECHAR>)* ";" >
    | < #CHARREF: "&#" (["0"-"9"])+ ";" | "&#x" (["0"-"9", "a"-"f", "A"-"F"])+ ";" >
}


SKIP: // Whitespace is skipped in lexical state DEFAULT
{
	< <SINGLE_S> >
}

TOKEN : {
      < STARTTAG: "<"                 > : WithinTag
    | < STARTCLOSINGTAG: "</"         > : WithinTag
    | < STARTPI: "<?"                 > : WithinPI
    | < STARTXMLDECL: "<?xml"         > : WithinXMLDecl
    | < STARTDOCTYPEDECL: "<!DOCTYPE" > : WithinDoctypeDecl
    | < STARTCOMMENT: "<!--"          > : Comment
    | < STARTCDATA: "<![CDATA["       > : WithinCData
    | < CHARDATA: ( ~["<", "&", "]"] | ( "]" ~["<", "&", "]"] | ( "]]" ~["<", "&", ">"] ) ) ) >
    | < DEFAULT_REFERENCE: <REFERENCE> >


    //| < GARBAGE: (~["<"])+ >
}

void xmlDocument() :
{}
{
	//content() <EOF> 
	prolog() element() (misc())* <EOF>
}

void prolog() :
{}
{
	( xmlDecl() )? ( misc() )* ( doctypeDecl() ( misc() )* )?
}

/**************************************************
 * Here starts the parsing of the XML declaration *
 **************************************************/

<WithinXMLDecl> TOKEN: {
      < ENDXMLDECL: "?>" > : DEFAULT
    //| < XMLDECL_S: <S> >
    | < XMLDECL_EQ: "=" >
    | < XD_DQUOTE_OPEN: "\"" > : WithinXMLDecl_DquoteString
    | < XD_SQUOTE_OPEN: "'" > : WithinXMLDecl_SquoteString
    | < VERSION: "version" > : WithinXMLDecl_Version
    | < ENCODING: "encoding" >
    | < STANDALONE: "standalone" > : WithinXMLDecl_Standalone
}
<WithinXMLDecl> SKIP: {
      < <SINGLE_S> >
}
<WithinXMLDecl_DquoteString> TOKEN: {
      < XD_DQUOTE_STRING: (~["\""])+ >
    | < XD_DQUOTE_CLOSE: "\"" > : WithinXMLDecl
}
<WithinXMLDecl_SquoteString> TOKEN: {
      < XD_SQUOTE_STRING: (~["'"])+ >
    | < XD_SQUOTE_CLOSE: "'" > : WithinXMLDecl
}

/* For convenience, this method returns the encoding. We need to determine that before anything else. */
String xmlDecl() :
{
	String version, encoding = null;
	Boolean standalone = null;
}
{
	<STARTXMLDECL> // Takes us to state WithinXMLDecl
	version = versionInfo() 
	(/*LOOKAHEAD(2)*/ encoding = encodingDecl())? // encodingDecl and sdDecl have common prefixes..
	(/*LOOKAHEAD(2)*/ standalone = sdDecl())? 
	<ENDXMLDECL> // Back to DEFAULT
	{ contentHandler.xmlDecl(version, encoding, standalone); return encoding; }
}

<WithinXMLDecl_Version> TOKEN: {
      < VERSION_DOPEN: "=\"" >
    | < VERSION_DCLOSE: "\"" > : WithinXMLDecl
    | < VERSION_SOPEN: "='"  >
    | < VERSION_SCLOSE: "'"  > : WithinXMLDecl
    | < VER: "1.0" >
}
String versionInfo() :
{
	Token versionString;
}
{
	/*<XMLDECL_S>*/ <VERSION> // Takes us to state WithinXMLDecl_Version
	(<VERSION_DOPEN> versionString = <VER> <VERSION_DCLOSE> | 
	 <VERSION_SOPEN> versionString = <VER> <VERSION_SCLOSE> )
	{ return versionString.image; }
}

String encodingDecl() :
{
	Token encoding;
}
{
	/*<XMLDECL_S>*/ <ENCODING> <XMLDECL_EQ> 
	(<XD_SQUOTE_OPEN> encoding = <XD_SQUOTE_STRING> <XD_SQUOTE_CLOSE> | 
	 <XD_DQUOTE_OPEN> encoding = <XD_DQUOTE_STRING> <XD_DQUOTE_CLOSE> )
	//{ try { usedReader.changeEncoding(encoding.image); } catch(Exception e) { throw new RuntimeException(e); } }
	{ return encoding.image; }
}

<WithinXMLDecl_Standalone> TOKEN: {
      < STANDALONE_DOPEN: "=\"" >
    | < STANDALONE_DCLOSE: "\"" > : WithinXMLDecl
    | < STANDALONE_SOPEN: "='"  >
    | < STANDALONE_SCLOSE: "'"  > : WithinXMLDecl
    | < STANDALONE_YES: "yes" >
    | < STANDALONE_NO: "no" >
}
boolean sdDecl() :
{
	boolean b;
}
{
	/*<XMLDECL_S>*/ <STANDALONE> // Takes us to state WithinXMLDecl_Standalone
	( <STANDALONE_DOPEN> (<STANDALONE_YES> {b = true;} | <STANDALONE_NO> {b = false;}) <STANDALONE_DCLOSE> |
	  <STANDALONE_SOPEN> (<STANDALONE_YES> {b = true;} | <STANDALONE_NO> {b = false;}) <STANDALONE_SCLOSE> )
	{ return b; }
}

/***************************************************
 * Here starts the parsing of doctype declarations *
 ***************************************************/

/* Modified PubidChar a little to decrease complexity. Simply removed the '-char from the
   set so I wouldn't be forced to withdraw that later, when dealing with ''-strings... */

<WithinDoctypeDecl> TOKEN: {
      < WDD_NAME: <NAME> >
    //| < WDD_S: <S> >
    | < ENDDOCTYPEDECL: ">" > : DEFAULT
    | < EXTERNALID: "SYSTEM" (<SINGLE_S>)+ <SYSTEMLITERAL> |
                    "PUBLIC" (<SINGLE_S>)+ <PUBIDLITERAL> (<SINGLE_S>)+ <SYSTEMLITERAL> >
    | < #SYSTEMLITERAL: ("\"" (~["\""])* "\"") | ("'" (~["'"])* "'") >
    | < #PUBIDLITERAL: ("\"" (<PUBIDCHAR> | "'")* "\"") | ("'" (<PUBIDCHAR>)* "'") >
    | < #PUBIDCHAR: ( "\u0020" | "\r" | "\n" | ["a"-"z","A"-"Z","0"-"9"] | 
                      ["-", "(", ")", "+", ",", ".", "/", ":", "=", "?", ";", "!", "*", 
		       "#", "@", "$", "_", "%"] ) >
    | < BEGIN_INTSUBSET: "[" > : WithinIntSubset
    //| < CURRENTLYIGNOREDSTUFF: "[" (~["]"])*  "]" >

}

<WithinDoctypeDecl> SKIP: {
      < <SINGLE_S> >
}

// Needs more work to support inline DTD declarations
void doctypeDecl() :
{
	Token name;
}
{
	// Lecixal state: DEFAULT
	<STARTDOCTYPEDECL> // DEFAULT -> WithinDoctypeDecl
	
	// Lexical state: WithinDoctypeDecl
	/*<WDD_S>*/ name = <WDD_NAME>
	( /*LOOKAHEAD(2) <WDD_S>*/ <EXTERNALID> )?
	/*( <WDD_S> )?*/
	( <BEGIN_INTSUBSET> intSubset() /*(<WDD_S>)?*/ )?
	<ENDDOCTYPEDECL> // WithinDoctypeDecl -> DEFAULT

	// Lexical state: DEFAULT

	{ contentHandler.doctype(name.image, null); }
}

<WithinIntSubset> TOKEN: {
      < END_INTSUBSET: "]" > : WithinDoctypeDecl
    | < WHATEVER: (~["]"])+ >
//    | < DECLSEP: "%" <NAME> ";" | <S> >
//    | < ELEMENTDECL: "<!ELEMENT" <S>  <NAME>  <S>  <CONTENTSPEC>  (<S>)? ">" >
//    | < CONTENTSPEC: "EMPTY" | "ANY" | <MIXED> | <CHILDREN> >
//    | < #MIXED: "(" (<S>)? "#PCDATA" ((<S>)? "|" (<S>)? <NAME>)* (<S>)? ")*" | 
//                "(" (<S>)? "#PCDATA" (<S>)? ")" >
//    | < #CHILDREN: ( <CHOICE> | <SEQ> ) ("?" | "*" | "+")? >
//    | < #CHOICE: "(" (<S>)? <CP> ( (<S>)? "|" (<S>)? <CP> )+ (<S>)? ")" >
//    | < #SEQ: "(" (<S>)? <CP> ( (<S>)? "," (<S>)? <CP> )* (<S>)? ")" >
//    | < #CP: ( <NAME> | <CHOICE> | <SEQ> ) ("?" | "*" | "+")? >
}
void intSubset() :
{}
{
	//( markupDecl() | <DECLSEP> )*
	(<WHATEVER>)?
	<END_INTSUBSET>
}

//void markupDecl() :
//{}
//{
//	
//}

void misc() :
{}
{
	comment() | pi()
}


/***************************************
 * Here starts the parsing of comments *
 ***************************************/
<Comment> TOKEN : {
      < ENDCOMMENT: "-->" > : DEFAULT
    | < COMMENT_ILLEGAL: "--" >
    | < COMMENT_CHAR: <CHAR> >
}
void comment() :
{
	Token t;
	StringBuilder sb = new StringBuilder();
}
{
	<STARTCOMMENT> // DEFAULT -> Comment
	( t = <COMMENT_CHAR> {sb.append(t.image);} )*
	<ENDCOMMENT> // Comment -> DEFAULT
	{ contentHandler.comment(sb.toString()); }
}

/*********************************************************
 * Here starts the parsing of the processor instructions *
 *********************************************************/

/* There are two states within a PI, first the one recognizing the identifier of the target
   of the processor instruction, represented by <PITARGET>. Then the parser switches to a
   state where everything is accepted except for the <ENDPI> token.
   The <STARTPI> token of state DEFAULT takes us to the first PI state, labeled WithinPi,
   the <WITHINPI_S> token (representing whitespace) takes us to the second PI state (where
   everything goes except for <ENDPI>) and the <ENDPI> token takes us back to DEFAULT. */


<WithinPI, WithinPIContent> TOKEN: {
      < ENDPI: "?>" > : DEFAULT
}

<WithinPI> TOKEN: {
      < ILLEGALTARGET: ( "X" | "x") ("M" | "m") ("L" | "l") (<NAME>)* >
    | < PITARGET: <NAME> >
    | < WITHINPI_S: <SINGLE_S> > : WithinPIContent
}
void pi() :
{
	Token target;
	StringBuilder content = null;
}
{
	<STARTPI> 
	target = <PITARGET> //{ System.out.println("target: " + target.image); }
	(<WITHINPI_S> content = piContent() | <ENDPI>)
	{ contentHandler.pi(target.image, content.toString()); }
}

<WithinPIContent> TOKEN: {
      //< ENDPI: "?>" > : WithinXMLDecl
      < PC_CHAR: <CHAR> >
      //< NONCONTENT: (<CHAR>)* "?>" (<CHAR>)* >
      //< CONTENT: ("?" (">" | <CHAR> <CONTENT>) | <CHAR> <CONTENT> >
}

// returns the content of the processor instruction, minus the trailing "?>"
StringBuilder piContent() :
{
	Token t;
	StringBuilder sb = new StringBuilder();
}
{
	(<ENDPI>  
	 | 
	 t = <PC_CHAR> { sb.append(t.image); } )+
	{ return sb; }
}

/**************************************************
 * Here starts the parsing of the actual elements *
 **************************************************/
<WithinTag> TOKEN: {
      < WT_EQ: "=" >
    | < WT_NAME: <NAME> >
    //| < WT_S: <S> >
    | < WT_DQUOTE: "\"" > : Attribute
    | < WT_SQUOTE: "'" > : Attribute
    | < EMPTY_ENDTAG: "/>" > : DEFAULT 
    | < ENDTAG: ">" > : DEFAULT 
}

<WithinTag> SKIP: {
      < <SINGLE_S> >
}

void element() :
{
	String name;
	Attribute currentAttribute;
	LinkedList<Attribute> attributes = new LinkedList<Attribute>();
}
{
	<STARTTAG> // DEFAULT -> WithinTag
	name = elementname() //name = <WT_NAME>
	( currentAttribute = attribute() {attributes.add(currentAttribute);} )*
	( <EMPTY_ENDTAG> // WithinTag -> DEFAULT
	  { contentHandler.emptyElement(name, attributes); }
	  | 
	  <ENDTAG> // WithinTag -> DEFAULT
	  { contentHandler.startElement(name, attributes); }
	  content()
	  etag(name) )
}

String elementname() :
{
	Token t;
}
{
	t = <WT_NAME>
	{ return t.image; }
}

<Attribute> TOKEN: {
      < ATTR_DQUOTE: "\"" > : WithinTag
    | < ATTR_SQUOTE: "'" > : WithinTag
    | < ATTR_DQUOTE_STRING: ~["<", "&", "\""] >
    | < ATTR_SQUOTE_STRING: ~["<", "&", "'"] >
    | < ATTR_REFERENCE: <REFERENCE> >
}

Attribute attribute() :
{
	Token t;
	String name;
	LinkedList<Attribute.ValueComponent> value = new LinkedList<Attribute.ValueComponent>();
}
{
	name = elementname() <WT_EQ>
	( 
	  (
	    <WT_DQUOTE> // WithinTag -> Attribute
	    ( t = <ATTR_DQUOTE_STRING> { value.add(new Attribute.StringComponent(t.image)); } | 
	      t = <ATTR_REFERENCE> { value.add(new Attribute.ReferenceComponent(t.image)); } )*
	    <ATTR_DQUOTE> // Attribute -> WithinTag
	  )
	  |
	  (
	    <WT_SQUOTE> // WithinTag -> Attribute
	    ( t = <ATTR_SQUOTE_STRING> { value.add(new Attribute.StringComponent(t.image)); } | 
	      t = <ATTR_REFERENCE> { value.add(new Attribute.ReferenceComponent(t.image)); } )*
	    <ATTR_SQUOTE> // Attribute -> WithinTag
	  )
	)
	{ return new Attribute(name, new Attribute.Value(value)); }
}

void etag(String startName) :
{
	String name;
}
{
	<STARTCLOSINGTAG> // DEFAULT -> WithinTag
	name = elementname() /*(<WT_S>)? */
	<ENDTAG> // WithinTag -> DEFAULT
	{
	  if(startName.equals(name))
	    contentHandler.endElement(name);
	  else
	      throw new ParseException("Expected \"</" + startName + "\" but got \"</" + name + "\".");
	}
}

void content() :
{
	//StringBuilder sb = new StringBuilder();
	Token t;
}
{
	// Lexical state:  DEFAULT
	// Original:       CharData? ((element | Reference | CDSect | PI | Comment) CharData?)*
	// Ekvivalent(?):  (element | Reference | CDSect | PI | Comment | CharData)*
	( charData() )?
	( ( element() | t = <DEFAULT_REFERENCE> | cdSect() | pi() | comment() ) ( charData() )? )*
	
	//( element() | <DEFAULT_REFERENCE> | cdSect() | pi() | comment() | charData() )*
}

void charData() :
{
	Token t;
	int beginLine = -1, beginColumn = -1;
	//StringBuilder sb = new StringBuilder();
}
{
	( t = <CHARDATA>
	 { if(beginLine == -1) { beginLine = t.beginLine; beginColumn = t.beginColumn; } } )+
	{ contentHandler.chardata(beginLine, beginColumn, t.endLine, t.endColumn); }
	
	//( t = <CHARDATA> { System.out.println("chardata1: \"" + t.image + "\""); })+
}


/******************************************
 * Here starts the parsing CDATA sections *
 ******************************************/

/* To remove <ENDCDATA> from a string of <CHAR>s we use a recursive method, cdSect_prime() */
<WithinCData> TOKEN: {
      < ENDCDATA: "]]>" > : DEFAULT
    | < WCD_CHAR: <CHAR> >
}
void cdSect() :
{
	Token t;
	StringBuilder cdata = new StringBuilder();
}
{
	<STARTCDATA> // DEFAULT -> WithinCData
   	( <ENDCDATA> // WithinCData -> DEFAULT
	  |
	  t = <WCD_CHAR> {cdata.append(t.image);} )*
	
	{ contentHandler.cdata(cdata.toString()); }
}

/*
// Old but interesting code

void xmlDocument() :
{
	Token tagName, optionName, optionValue;
	LinkedList<Param> params = new LinkedList<Param>();
}
{
	<STARTTAG>
	tagName = <IDENTIFIER> 
	(optionName = <IDENTIFIER> 
	 <EQ> 
	 (<DQUOTE_OPEN> 
	  optionValue = <DQUOTE_STRING> 
	  <DQUOTE_CLOSE>|
	  <SQUOTE_OPEN>	
	  optionValue = <SQUOTE_STRING>
	  <SQUOTE_CLOSE>)
	 { params.add(new Param(optionName, optionValue)); }
	)*	
	<ENDTAG>
	{
	System.out.println("Collected the following data:");
	System.out.println("Tag name: \"" + tagName.image + "\"");
	System.out.println("Params:");
	for(Param p : params)
	    System.out.println("  \"" + p.id.image + "\" = \"" + p.string.image + "\"");
	}
	<GARBAGE> 
	<EOF>
	
}
*/